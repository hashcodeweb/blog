(window.webpackJsonp=window.webpackJsonp||[]).push([[34],{449:function(t,a,e){t.exports=e.p+"assets/img/2023-11-11-16-54-12.f3abda5f.png"},450:function(t,a,e){t.exports=e.p+"assets/img/2023-11-11-16-54-50.d907cb59.png"},451:function(t,a,e){t.exports=e.p+"assets/img/2023-11-11-16-56-19.f371f71b.png"},452:function(t,a,e){t.exports=e.p+"assets/img/2023-11-11-16-55-38.dac08472.png"},510:function(t,a,e){"use strict";e.r(a);var s=e(2),v=Object(s.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"git学习笔记整理-本篇已废-中文学习手册教的太浅"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git学习笔记整理-本篇已废-中文学习手册教的太浅"}},[t._v("#")]),t._v(" Git学习笔记整理---本篇已废-中文学习手册教的太浅")]),t._v(" "),a("h2",{attrs:{id:"git是什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git是什么"}},[t._v("#")]),t._v(" Git是什么？")]),t._v(" "),a("p",[t._v("Git是一个开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目。")]),t._v(" "),a("h2",{attrs:{id:"下载地址"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#下载地址"}},[t._v("#")]),t._v(" 下载地址")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("https://git-scm.com/downloads\n")])])]),a("h2",{attrs:{id:"安装"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#安装"}},[t._v("#")]),t._v(" 安装")]),t._v(" "),a("p",[t._v("一直点下一步即可\n"),a("img",{attrs:{src:e(449),alt:""}})]),t._v(" "),a("h2",{attrs:{id:"git的配置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git的配置"}},[t._v("#")]),t._v(" Git的配置")]),t._v(" "),a("p",[a("code",[t._v("/etc/gitconfig")]),t._v(" 文件：系统中对所有用户都普遍适用的配置。若使用 "),a("code",[t._v("git config")]),t._v(" 时用 "),a("code",[t._v("--system")]),t._v(" 选项，读写的就是这个文件。")]),t._v(" "),a("p",[a("code",[t._v("~/.gitconfig")]),t._v(" 文件：用户目录下的配置文件只适用于该用户。若使用 "),a("code",[t._v("git config")]),t._v(" 时用 "),a("code",[t._v("--global")]),t._v(" 选项，读写的就是这个文件。")]),t._v(" "),a("p",[t._v("当前项目的 Git 目录中的配置文件（也就是工作目录中的 "),a("code",[t._v(".git/config")]),t._v(" 文件）：这里的配置仅仅针对当前项目有效。每一个级别的配置都会覆盖上层的相同配置，所以 "),a("code",[t._v(".git/config")]),t._v(" 里的配置会覆盖 "),a("code",[t._v("/etc/gitconfig")]),t._v(" 中的同名变量。")]),t._v(" "),a("h2",{attrs:{id:"配置用户名称和电子邮件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#配置用户名称和电子邮件"}},[t._v("#")]),t._v(" 配置用户名称和电子邮件")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('$ git config --global user.name "su918gc"\n$ git config --global user.email su918gc@gmail.com\n')])])]),a("p",[t._v("如果用了 "),a("code",[t._v("--global")]),t._v(" 选项，那么更改的配置文件就是位于你用户主目录下的那个，以后你所有的项目都会默认使用这里配置的用户信息。")]),t._v(" "),a("p",[t._v("如果要在某个特定的项目中使用其他名字或者电邮，只要去掉  "),a("code",[t._v("--global")]),t._v(" 选项重新配置即可，新的设定保存在当前项目的 "),a("code",[t._v(".git/config")]),t._v(" 文件里。")]),t._v(" "),a("h2",{attrs:{id:"文本编辑器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#文本编辑器"}},[t._v("#")]),t._v(" 文本编辑器")]),t._v(" "),a("p",[t._v("设置Git默认使用的文本编辑器, 一般可能会是 Vi 或者 vim。如果你有其他偏好，比如 Emacs 的话，可以重新设置：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("$ git config --global core.editor emacs\n")])])]),a("h2",{attrs:{id:"差异分析工具"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#差异分析工具"}},[t._v("#")]),t._v(" 差异分析工具")]),t._v(" "),a("p",[t._v("还有一个比较常用的是，在解决合并冲突时使用哪种差异分析工具。比如要改用 vimdiff 的话：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("$ git config --global merge.tool vimdiff\n")])])]),a("h2",{attrs:{id:"查看配置信息"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#查看配置信息"}},[t._v("#")]),t._v(" 查看配置信息")]),t._v(" "),a("p",[t._v("要检查已有的配置信息，可以使用 "),a("code",[t._v("git config --list")]),t._v(" 命令：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("$ git config --list\nuser.name=Scott Chacon\nuser.email=schacon@gmail.com\ncolor.status=auto\ncolor.branch=auto\ncolor.interactive=auto\ncolor.diff=auto\n...\n")])])]),a("p",[t._v("有时候会看到重复的变量名，那就说明它们来自不同的配置文件（比如 "),a("code",[t._v("/etc/gitconfig 和 ~/.gitconfig")]),t._v("），不过最终 Git 实际采用的是最后一个。")]),t._v(" "),a("p",[t._v("也可以直接查阅某个环境变量的设定，只要把特定的名字跟在后面即可，像这样：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("$ git config user.name\nScott Chacon\n")])])]),a("h2",{attrs:{id:"git的工作流程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git的工作流程"}},[t._v("#")]),t._v(" Git的工作流程")]),t._v(" "),a("p",[a("img",{attrs:{src:e(450),alt:""}})]),t._v(" "),a("ol",[a("li",[a("p",[t._v("克隆 Git 资源作为工作目录。")])]),t._v(" "),a("li",[a("p",[t._v("在克隆的资源上添加或修改文件。")])]),t._v(" "),a("li",[a("p",[t._v("如果其他人修改了，你可以更新资源。")])]),t._v(" "),a("li",[a("p",[t._v("在提交前查看修改。")])]),t._v(" "),a("li",[a("p",[t._v("提交修改。")])]),t._v(" "),a("li",[a("p",[t._v("在修改完成后，如果发现错误，可以撤回提交并再次修改并提交。")])])]),t._v(" "),a("h2",{attrs:{id:"git的三个区域"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git的三个区域"}},[t._v("#")]),t._v(" Git的三个区域")]),t._v(" "),a("p",[a("img",{attrs:{src:e(451),alt:""}}),t._v(" "),a("img",{attrs:{src:e(452),alt:""}})]),t._v(" "),a("p",[a("code",[t._v("工作区")]),t._v("：就是你在电脑里能看到的目录。")]),t._v(" "),a("p",[a("code",[t._v("暂存区")]),t._v("：英文叫 "),a("code",[t._v("stage")]),t._v(", 或"),a("code",[t._v("index")]),t._v('。一般存放在"git目录"下的'),a("code",[t._v("index")]),t._v("文件（"),a("code",[t._v(".git/index")]),t._v("）中，所以我们把暂存区有时也叫作索引（"),a("code",[t._v("index")]),t._v("）。")]),t._v(" "),a("p",[a("code",[t._v("版本库")]),t._v("：工作区有一个隐藏目录"),a("code",[t._v(".git")]),t._v("，这个不算工作区，而是Git的版本库。")]),t._v(" "),a("p",[t._v("图中左侧为工作区，右侧为版本库。在版本库中标记为 "),a("code",[t._v("index")]),t._v(" 的区域是暂存区（stage, index），标记为 "),a("code",[t._v("master")]),t._v("的是 "),a("code",[t._v("master")]),t._v(" 分支所代表的目录树。")]),t._v(" "),a("p",[t._v("图中我们可以看出此时 "),a("code",[t._v("HEAD")]),t._v(" 实际是指向 "),a("code",[t._v("master")]),t._v(' 分支的一个"游标"。所以图示的命令中出现 '),a("code",[t._v("HEAD")]),t._v(" 的地方可以用 "),a("code",[t._v("master")]),t._v(" 来替换。")]),t._v(" "),a("p",[t._v("图中的 "),a("code",[t._v("objects")]),t._v(" 标识的区域为 Git 的对象库，实际位于 "),a("code",[t._v(".git/objects")]),t._v(" 目录下，里面包含了创建的各种对象及内容。")]),t._v(" "),a("p",[t._v("当对工作区修改（或新增）的文件执行 "),a("code",[t._v("git add")]),t._v(" 命令时，暂存区的目录树被更新，同时工作区修改（或新增）的文件内容被写入到对象库中的一个新的对象中，而该对象的ID被记录在暂存区的文件索引中。")]),t._v(" "),a("p",[t._v("当执行提交操作"),a("code",[t._v("git commit")]),t._v("时，暂存区的目录树写到版本库（对象库）中，"),a("code",[t._v("master")]),t._v(" 分支会做相应的更新。即 "),a("code",[t._v("master")]),t._v(" 指向的目录树就是提交时暂存区的目录树。")]),t._v(" "),a("p",[t._v("当执行 "),a("code",[t._v("git reset HEAD")]),t._v(" 命令时，暂存区的目录树会被重写，被 master 分支指向的目录树所替换，但是工作区不受影响。")]),t._v(" "),a("p",[t._v("当执行 "),a("code",[t._v("git rm --cached <file>")]),t._v(" 命令时，会直接从暂存区删除文件，工作区则不做出改变。")]),t._v(" "),a("p",[t._v("当执行 "),a("code",[t._v("git checkout .")]),t._v(" 或者 "),a("code",[t._v("git checkout -- <file>")]),t._v(" 命令时，会用暂存区全部或指定的文件替换工作区的文件。这个操作很危险，会清除工作区中未添加到暂存区的改动。")]),t._v(" "),a("p",[t._v("当执行 "),a("code",[t._v("git checkout HEAD .")]),t._v(" 或者 "),a("code",[t._v("git checkout HEAD <file>")]),t._v(" 命令时，会用 "),a("code",[t._v("HEAD")]),t._v(" 指向的 "),a("code",[t._v("master")]),t._v(" 分支中的全部或者部分文件替换暂存区和以及工作区中的文件。这个命令也是极具危险性的，因为不但会清除工作区中未提交的改动，也会清除暂存区中未提交的改动。")]),t._v(" "),a("h2",{attrs:{id:"创建仓库的两种方式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#创建仓库的两种方式"}},[t._v("#")]),t._v(" 创建仓库的两种方式")]),t._v(" "),a("h3",{attrs:{id:"方法一-本地新建"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#方法一-本地新建"}},[t._v("#")]),t._v(" 方法一 本地新建")]),t._v(" "),a("p",[t._v("在本地新建一个文件，对文件进行初始化")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("git init \n")])])]),a("p",[t._v("或者指定一个文件夹作为Git的仓库")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("git init newrepo\n")])])]),a("p",[t._v("初始化后，在当前目录下会出现一个名为 "),a("code",[t._v(".git")]),t._v(" 的目录，所有 Git 需要的数据和资源都存放在这个目录中。")]),t._v(" "),a("p",[t._v("如果当前目录下有几个文件想要纳入版本控制，需要先用 "),a("code",[t._v("git add")]),t._v(" 命令告诉 Git 开始对这些文件进行跟踪，然后提交：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("$ git add *.c\n$ git add README\n$ git commit -m 'initial project version'\n")])])]),a("h3",{attrs:{id:"方法二-从github上克隆"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#方法二-从github上克隆"}},[t._v("#")]),t._v(" 方法二 从github上克隆")]),t._v(" "),a("p",[t._v("克隆仓库的命令格式为：")]),t._v(" "),a("p",[a("code",[t._v("git clone [url]")]),t._v("\n比如，要克隆 Ruby 语言的 Git 代码仓库 Grit，可以用下面的命令：")]),t._v(" "),a("p",[a("code",[t._v("$ git clone git://github.com/schacon/grit.git")]),t._v("\n执行该命令后，会在当前目录下创建一个名为grit的目录，其中包含一个 .git 的目录，用于保存下载下来的所有版本记录。")]),t._v(" "),a("p",[t._v("如果要自己定义要新建的项目目录名称，可以在上面的命令末尾指定新的名字：\n"),a("code",[t._v("$ git clone git://github.com/schacon/grit.git mygrit")])]),t._v(" "),a("h2",{attrs:{id:"基本流程操作"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#基本流程操作"}},[t._v("#")]),t._v(" 基本流程操作")]),t._v(" "),a("p",[t._v("Git 的工作就是创建和保存你的项目的快照及与之后的快照进行对比")]),t._v(" "),a("p",[t._v("可将该文件添加到缓存")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("git add\n")])])]),a("p",[t._v("添加所有文件到缓存")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("git add .\n")])])]),a("p",[t._v("用于查看项目的当前状态。查看在你上次提交之后是否有修改。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("git status\n")])])]),a("p",[t._v("显示已写入缓存与已修改但尚未写入缓存的改动的区别")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("git diff\n")])])]),a("p",[t._v("尚未缓存的改动："),a("code",[t._v("git diff")]),t._v("\n查看已缓存的改动： "),a("code",[t._v("git diff --cached")]),t._v("\n查看已缓存的与未缓存的所有改动："),a("code",[t._v("git diff HEAD")]),t._v("\n显示摘要而非整个 "),a("code",[t._v("diff：git diff --stat")])]),t._v(" "),a("p",[t._v("执行 "),a("code",[t._v("git commit")]),t._v(" 记录缓存区的快照")]),t._v(" "),a("p",[t._v("用于取消缓存已缓存的内容。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("git reset HEAD\n")])])]),a("p",[t._v("将文件从缓存区中移除")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("git rm\n")])])]),a("p",[t._v("默认情况下，"),a("code",[t._v("git rm file")]),t._v(" 会将文件从缓存区和你的硬盘中（工作目录）删除。 如果要在工作目录中留着该文件，可以使用命令：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v(" git rm --cached。\n")])])]),a("h2",{attrs:{id:"git分支管理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git分支管理"}},[t._v("#")]),t._v(" git分支管理")]),t._v(" "),a("p",[t._v("创建分支命令：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("git branch (branchname)\n")])])]),a("p",[t._v("切换分支命令:")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("git checkout (branchname)\n")])])]),a("p",[t._v("当你切换分支的时候，Git 会用该分支的最后提交的快照替换你的工作目录的内容， 所以多个分支不需要多个目录。")]),t._v(" "),a("p",[t._v("合并分支命令:")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("git merge \n")])])]),a("p",[t._v("你可以多次合并到统一分支， 也可以选择在合并之后直接删除被并入的分支。")]),t._v(" "),a("p",[t._v("列出分支基本命令：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("git branch\n")])])]),a("p",[t._v("没有参数时，git branch 会列出你在本地的分支。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("$ git branch\n* master\n")])])]),a("p",[t._v("此例的意思就是，我们有一个叫做"),a("code",[t._v("master")]),t._v("的分支，并且该分支是当前分支。")]),t._v(" "),a("p",[t._v("当你执行 "),a("code",[t._v("git init")]),t._v(" 的时候，缺省情况下 Git 就会为你创建"),a("code",[t._v("master")]),t._v("分支。")]),t._v(" "),a("p",[t._v("如果我们要手动创建一个分支，并切换过去。执行 "),a("code",[t._v("git branch (branchname)")]),t._v(" 即可。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("$ git branch testing\n$ git branch\n* master\n  testing\n")])])]),a("p",[t._v("现在我们可以看到，有了一个新分支 "),a("code",[t._v("testing")]),t._v("。")]),t._v(" "),a("p",[t._v("当你以此方式在上次提交更新之后创建了新分支，如果后来又有更新提交， 然后又切换到了"),a("code",[t._v("testing")]),t._v("分支，Git 将还原你的工作目录到你创建分支时候的样子")]),t._v(" "),a("p",[t._v("使用分支将工作切分开来，从而让我们能够在不同上下文中做事，并来回切换。")]),t._v(" "),a("p",[t._v("删除分支命令：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("git branch -d (branchname)\n")])])]),a("h3",{attrs:{id:"分支合并"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#分支合并"}},[t._v("#")]),t._v(" 分支合并")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("$ git branch\n* master\n  newtest\n$ ls\nREADME       test.txt    test2.txt\n$ git merge newtest\nUpdating 2e082b7..556f0a0\nFast-forward\n test2.txt | 1 -\n 1 file changed, 1 deletion(-)\n delete mode 100644 test2.txt\n$ ls\nREADME      test.txt\n")])])]),a("p",[t._v("以上实例中我们将 newtest 分支合并到主分支去，test2.txt 文件被删除。")])])}),[],!1,null,null,null);a.default=v.exports}}]);